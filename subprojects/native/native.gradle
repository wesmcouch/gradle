/*
    This project contains various native operating system integration utilities.
*/
plugins {
    id 'java-library'
    id 'classycle'
}

sourceCompatibility = javaVersion.java9Compatible ? 1.6 : 1.5

dependencies {
    api project(':baseServices')
    api libraries.nativePlatform.coordinate

    implementation libraries.commons_io.coordinate
    implementation libraries.slf4j_api.coordinate
    implementation libraries.jansi.coordinate
    implementation libraries.guava.coordinate
}

testFixtures {
    from(':core')
    from(':logging')
}

jmh {
    fork = 1
    threads = 2
    warmupIterations = 10
    synchronizeIterations = false
    resultFormat = 'CSV'
}

task copyJmhReport(type: Copy) {
    destinationDir = file("$buildDir/reports/jmh-html")

    from 'src/jmh/html'
}

task convertCSV {
    ext.inputFile = file("$buildDir/reports/jmh/results.csv")
    ext.outputFile = file("$buildDir/reports/jmh-html/data.csv")
    inputs.file(inputFile)
    outputs.file(outputFile)
    doLast {
        def benchToScenarioName = [
            'org.gradle.internal.nativeintegration.filesystem.FileMetadataAccessorBenchmark.stat_existing': 'Existing',
            'org.gradle.internal.nativeintegration.filesystem.FileMetadataAccessorBenchmark.stat_directory': 'Directory',
            'org.gradle.internal.nativeintegration.filesystem.FileMetadataAccessorBenchmark.stat_missing_file': 'Missing',
        ]
        boolean first = true
        def benchmarks = [:].withDefault { [] }
        inputFile.eachLine { line ->
            if (first) {
                first = false
            } else {
                def (benchmark, mode, threads, samples, score, error, unit, accessor) = line.replace('"', '').split(",")
                benchmarks[benchToScenarioName[benchmark]] << [accessor - 'FileMetadataAccessor', Double.valueOf(score) as int]
            }
        }
        outputFile.parentFile.mkdirs()
        Set tested = []
        benchmarks.each { benchmark, values ->
            values.each {
                tested << it[0]
            }
        }
        outputFile.withWriter { writer ->
            writer << "Scenario,${tested.join(',')}\n"
            benchmarks.each { benchmark, values ->
                writer << "$benchmark"
                tested.each { test ->
                    writer << ",${values.find { it[0] == test }[1]}"
                }
                writer << '\n'
            }
        }
        println outputFile.absolutePath
    }
}

task jmhReport {
    dependsOn 'jmh', copyJmhReport, convertCSV
}
